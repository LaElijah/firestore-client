{"mappings":";;;;;;;;AAAA,0CAA0C;;;;;;;AGa3B;IASX,YAAY,YACR,QAAQ,UACR,MAAM,WACN,OAAO,EAKV,CACC;QAEE,IAAI,CAAC,SAAS,CAAC;YAAC,GAAG,OAAO;QAAA;QAC1B,IAAI,CAAC,OAAO,GAAG;QACf,IAAI,CAAC,KAAK,GAAG,CAAA,GAAA,SAAC,EAAE,gBAAgB,CAAC;IAErC;IAEA,MAAa,SAAS,GAAW,EAAE,WAAW,IAAI,EAAE;QAChD,MAAM,WAAW,MAAM,yCAAgB,GAAG,CAAC,IAAI,CAAC,IAAI,CAAA,GAAA,uBAAe,EAAE;YACjE,QAAQ,IAAI,CAAC,OAAO;YACpB,KAAK;QACT;QAEA,OAAO,MAAM,SAAS,IAAI,CAAC,iBAAiB;IAChD;IAGA,gEAAgE;IAChE,MAAa,MAAM,GAAW,EAAE;QAC5B,IAAI,IAAI,CAAC,KAAK,KAAK,WAAW,MAAM,MAAM;QAC1C,IAAI,aAAa;QACjB,wDAAwD;QACxD,IAAI,CAAC,KAAK,aAAa,CAAA,GAAA,aAAK,EAAE,UAAU;QAExC,IAAI;YACJ,MAAM,WAAW,MAAM,yCAAgB,GAAG,CAAC,IAAI,CAAC,IAAI,CAAA,GAAA,uBAAe,EAAE;gBACjE,QAAQ,IAAI,CAAC,OAAO;gBACpB,MAAM,IAAI,CAAC,KAAK;gBAChB,KAAK;gBACL,aAAa;YACjB;YACA,QAAQ,GAAG,CAAC;QACZ,EACA,OAAO,OAAO;YACV,QAAQ,GAAG,CAAC;QAChB;IAGA,0CAA0C;IAE9C;IAIA,kCAAkC;IAC3B,UAAU,UAAC,MAAM,eAAE,WAAW,mBAAE,eAAe,EAAiE,EAAE;QAErH,yCAAgB,GAAG,GAAG,IAAI,CAAA,GAAA,eAAC,EAAE;oBACzB;YACA,aAAa;gBACT,aAAa;iCACb;YACJ;QACJ;IACJ;IAEA,GAAG;IACH,IAAW,KAAK,QAAgB,EAAE;QAC9B,IAAI,CAAC,KAAK,GAAG,CAAA,GAAA,SAAC,EAAE,gBAAgB,CAAC;IACrC;AAGJ,EAIA,uCAAuC;CACvC,kDAAkD;CAClD,oCAAoC;CACpC,sCAAsC;CACtC,iDAAiD;CACjD,kDAAkD;;;;;","sources":["src/index.ts","src/tools/index.ts","src/tools/FireStoreClient/index.ts","src/tools/FireStoreClient/FireStoreClient.ts"],"sourcesContent":["///<reference path=\"./types/index.d.ts\" />\n\nexport * from \"./tools\";","export {default as FireStoreClient} from \"./FireStoreClient\";\n","export { default } from \"./FireStoreClient\"","import fs, { ReadStream } from \"fs\"\nimport { PutObjectCommand, GetObjectCommand, S3Client as S3 } from \"@aws-sdk/client-s3\";\nimport crypto from \"crypto\"\n\n\ninterface Options {\n    accessKeyId: string,\n    secretAccessKey: string,\n    key: string,\n    region: string\n}\n\n\nexport default class FireStoreClient {\n    // properties\n\n    private _file: ReadStream | undefined;\n    private _bucket: string;\n    private static _s3: any;\n\n\n\n    constructor({\n        filepath,\n        bucket,\n        options\n    }: {\n        filepath: string,\n        bucket: string,\n        options: Options\n    }\n    ) {\n\n        this.setConfig({...options})\n        this._bucket = bucket\n        this._file = fs.createReadStream(filepath)\n\n    }\n\n    public async download(key: string, asBuffer = true) {\n        const response = await FireStoreClient._s3.send(new GetObjectCommand({\n            Bucket: this._bucket,\n            Key: key\n        }))\n\n        return await response.Body.transformToString()\n    }\n\n\n    // stores the file in the chosen store, in dev starting with AWS\n    public async store(key: string) {\n        if (this._file === undefined) throw Error(\"Read undefined when attempting to save file\")\n        let workingKey = key\n        // TODO: Change this to add date and/or file name to key\n        if (!key) workingKey = crypto.randomUUID()\n\n        try {\n        const response = await FireStoreClient._s3.send(new PutObjectCommand({\n            Bucket: this._bucket,\n            Body: this._file,\n            Key: workingKey,\n            ContentType: \"text/markdown\"\n        }))\n        console.log(response)\n        }\n        catch (error) {\n            console.log(error)\n        }\n\n\n        // Change to return status and or message \n      \n    }\n\n\n\n    // Resets firestore client config \n    public setConfig({region, accessKeyId, secretAccessKey}: {region: string, accessKeyId: string, secretAccessKey: string}) {\n        \n        FireStoreClient._s3 = new S3({\n            region,\n            credentials: {\n                accessKeyId: accessKeyId,\n                secretAccessKey\n            }\n        })\n    }\n\n    // \n    public set file(filepath: string) {\n        this._file = fs.createReadStream(filepath)\n    }\n\n\n}\n\n\n\n// The client should be able to take in\n// a uri to connect to s3, then it should be able \n// to store a file in that s3 bucket\n// or be able to get a a markdown file\n// each operation should return an option status \n// and if theres a failure then it should respond \n"],"names":[],"version":3,"file":"module.js.map"}